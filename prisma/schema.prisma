generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(MEMBER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]

  // Application relations
  assignedTasks   Task[]          @relation("TaskAssignee")
  projectMembers  ProjectMember[]
  taskComments    TaskComment[]
  taskActivities  TaskActivity[]
  createdProjects Project[]       @relation("ProjectCreator")
  createdTasks    Task[]          @relation("TaskCreator")
  createdThreads  ProjectThread[] @relation("ThreadCreator")
  threadMessages  ThreadMessage[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id          String       @id @default(cuid())
  name        String
  description String?
  status      ProjectState @default(ACTIVE)
  priority    Priority     @default(MEDIUM)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  client      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   String
  creator     User         @relation("ProjectCreator", fields: [createdBy], references: [id])

  // Relations
  members    ProjectMember[]
  statuses   ProjectStatus[]
  tasks      Task[]
  tags       ProjectTag[]
  milestones Milestone[]
  threads    ProjectThread[]

  @@map("projects")
}

model ProjectMember {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model ProjectStatus {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String?
  color       String?
  order       Int
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@unique([projectId, title])
  @@map("project_statuses")
}

model ProjectTag {
  id        String   @id @default(cuid())
  projectId String
  name      String
  color     String?
  createdAt DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name])
  @@map("project_tags")
}

model Task {
  id             String    @id @default(cuid())
  title          String
  description    String?
  projectId      String
  statusId       String
  priority       Priority  @default(MEDIUM)
  dueDate        DateTime?
  estimatedHours Float?
  actualHours    Float?
  assignedTo     String?
  createdBy      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  project    Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  status     ProjectStatus  @relation(fields: [statusId], references: [id])
  assignee   User?          @relation("TaskAssignee", fields: [assignedTo], references: [id])
  creator    User           @relation("TaskCreator", fields: [createdBy], references: [id])
  comments   TaskComment[]
  activities TaskActivity[]
  subtasks   Subtask[]
  parentTask String?
  parent     Task?          @relation("TaskSubtasks", fields: [parentTask], references: [id])
  children   Task[]         @relation("TaskSubtasks")
  tags       TaskTag[]

  @@map("tasks")
}

model Subtask {
  id          String   @id @default(cuid())
  taskId      String
  title       String
  isCompleted Boolean  @default(false)
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("subtasks")
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("task_comments")
}

model TaskActivity {
  id        String     @id @default(cuid())
  taskId    String
  userId    String
  action    TaskAction
  details   Json?
  createdAt DateTime   @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("task_activities")
}

model TaskTag {
  id     String  @id @default(cuid())
  taskId String
  name   String
  color  String?

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, name])
  @@map("task_tags")
}

model Milestone {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String?
  dueDate     DateTime
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("milestones")
}

model ProjectThread {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String?
  isPinned    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  creator     User     @relation("ThreadCreator", fields: [createdBy], references: [id])

  // Relations
  project  Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages ThreadMessage[]
  tags     ThreadTag[]

  @@map("project_threads")
}

model ThreadMessage {
  id        String   @id @default(cuid())
  threadId  String
  content   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parentId  String?

  // Relations
  thread      ProjectThread      @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      ThreadMessage?     @relation("MessageReplies", fields: [parentId], references: [id])
  replies     ThreadMessage[]    @relation("MessageReplies")
  attachments ThreadAttachment[]

  @@map("thread_messages")
}

model ThreadAttachment {
  id        String   @id @default(cuid())
  messageId String
  filename  String
  fileType  String
  fileSize  Int
  fileUrl   String?
  createdAt DateTime @default(now())

  // Relations
  message ThreadMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("thread_attachments")
}

model ThreadTag {
  id        String   @id @default(cuid())
  threadId  String
  name      String
  color     String?
  createdAt DateTime @default(now())

  // Relations
  thread ProjectThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@unique([threadId, name])
  @@map("thread_tags")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

enum ProjectRole {
  OWNER
  MANAGER
  MEMBER
  VIEWER
}

enum ProjectState {
  ON_HOLD
  ACTIVE
  COMPLETED
  CANCELLED
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskAction {
  CREATED
  UPDATED
  STATUS_CHANGED
  ASSIGNED
  COMMENTED
  COMPLETED
  REOPENED
  DELETED
}
